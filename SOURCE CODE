import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.linear_model import LinearRegression

data=pd.read_csv(r"C:\Users\manes\OneDrive\Desktop\DATASET 2 - Auto_Data_Set_963_49.csv")
df = pd.DataFrame(data)
df.drop(['name'],axis=1,inplace=True)

X = df.drop(columns=['mpg'])
y = df['mpg']

#Splitting data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)

#Train the model
model = LinearRegression()
model.fit(X_train, y_train)

#Evaluate the model
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"R-squared (R2): {r2:.2f}")

#Ploting graph
plt.scatter(y_test, y_pred, color='red')
plt.xlabel('Actual Fuel Efficiency (mpg)')
plt.ylabel('Predicted Fuel Efficiency (mpg)')
plt.title('Actual vs Predicted Fuel Efficiency')
plt.plot([min(y_test), max(y_pred)], [min(y_test), max(y_pred)], c='blue')
plt.show()

def Fuel_efficiency_predictor(l):
    lf=pd.DataFrame(l)
    y_pred = model.predict(lf)
    print('mpg=', y_pred)
    if y_pred > 30:
        print('The car is fuel efficient')
    else:
        print('The car is not fuel efficient')

b=int(input('Enter cylinder'))
c=float(input('Enter displacement'))
d=int(input('Enter horsepower'))
e=int(input('Enter weight '))
f=float(input('Enter acceleration'))
g=int(input('Enter year '))
h=int(input('Enter origin'))

l = {
    'cylinders': [b],
    'displacement': [c],
    'horsepower': [d],
    'weight': [e],
    'acceleration': [f],
    'year': [g],
    'origin': [h]
}

Fuel_efficiency_predictor(l)
